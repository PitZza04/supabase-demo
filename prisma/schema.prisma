generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id               String         @id @db.Uuid
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  street_address_1 String
  street_address_2 String
  region_id        String         @db.Uuid
  province_id      String         @db.Uuid
  city_id          String         @db.Uuid
  brgy_id          String         @db.Uuid
  barangay         Barangay       @relation(fields: [brgy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  city             City           @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  province         Province       @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  region           Region         @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profile     User_profile[]
  updated_at       DateTime?      @db.Timestamptz(6)
}

model Barangay {
  id         String    @id @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  city_id    String    @db.Uuid
  address    Address[]
  city       City      @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Brand {
  id         BigInt    @id @default(autoincrement())
  name       String
  img_url    String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  model      Model[]
  vehicle    Vehicle[]
}

model City {
  id          String     @id @db.Uuid
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @db.Timestamptz(6)
  city_name   String
  province_id String     @db.Uuid
  address     Address[]
  barangay    Barangay[]
  province    Province   @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Driver_license {
  id              String         @id(map: "driver_license_id_pkey") @db.Uuid
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  license_no      String
  date_expiration DateTime?      @db.Date
  driver_img_url  String?
  user_profile    User_profile[]
  updated_at      DateTime?      @db.Timestamptz(6)
}

model Model {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  name       String
  img_url    String?
  brand_id   BigInt
  brand      Brand     @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle    Vehicle[]
}

model Product {
  id                   String            @id @db.Uuid
  created_at           DateTime?         @default(now()) @db.Timestamptz(6)
  product_name         String
  price                Decimal?          @db.Decimal
  product_metadata     Json?
  shop_id              String            @db.Uuid
  updated_at           DateTime?         @db.Timestamptz(6)
  published            Boolean
  services_category_id String            @db.Uuid
  services_type_id     String            @db.Uuid
  services_category    Services_category @relation(fields: [services_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services_type        Services_type     @relation(fields: [services_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Province {
  id            String    @id @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  province_name String?
  updated_at    DateTime? @db.Timestamptz(6)
  region_id     String    @db.Uuid
  address       Address[]
  city          City[]
  region        Region    @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Region {
  id          String     @id @unique @db.Uuid
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @db.Timestamptz(6)
  region_name String
  address     Address[]
  province    Province[]
}

model Services_category {
  id               String        @id @db.Uuid
  created_at       DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?     @db.Timestamptz(6)
  services_type_id String        @db.Uuid
  category_name    String
  product          Product[]
  services_type    Services_type @relation(fields: [services_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Services_type {
  id                String              @id @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  type_name         String
  product           Product[]
  services_category Services_category[]
}

model User_profile {
  id                String          @id(map: "profiles_pkey") @db.Uuid
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @db.Timestamptz(6)
  email             String?         @unique
  metadata          Json?           @default("{\"birth\": \"\", \"fname\": \"\", \"lname\": \"\", \"mname\": \"\", \"gender\": \"\"}")
  avatar_url        String?
  address_id        String?         @db.Uuid
  driver_license_id String?         @db.Uuid
  gender            gender?
  address           Address?        @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  driver_license    Driver_license? @relation(fields: [driver_license_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle           Vehicle[]
}

model Vehicle {
  id           BigInt       @id @default(autoincrement())
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  plate_no     String?
  engine_no    String?
  fuel_type    String
  chassis_no   String?
  user_id      String       @db.Uuid
  brand_id     BigInt
  model_id     BigInt
  brand        Brand        @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  model        Model        @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profile User_profile @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updated_at   DateTime?    @db.Timestamptz(6)
}

enum gender {
  Male
  Female
}

enum status {
  active
  inactive
  deleted
}

//lockdown all tables
